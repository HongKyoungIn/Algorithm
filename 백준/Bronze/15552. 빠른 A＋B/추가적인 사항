#include <iostream>
#include <string>

using namespace std;

int main() {
    int num;
    int a, b;
    
    // C와 C++ 사이의 버퍼 동기화를 끊어 cin, cout이 독립적인 버퍼를 갖게하는 방식으로 입출력 속도를 scanf, printf 못지 않게 크게 향상시킨다.
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> num;
    
    for(int i = 0; i < num; i++) {
        cin >> a >> b;
        cout << a + b << "\n";
    }
    
    return 0;
}

/* 
scanf("%d\n", &num);
    
for (int i = 0; i < num; i++) {
	scanf("%d %d", &a, &b);
	printf("%d\n", a + b);
}
*/

// scanf와 printf가 더 빠르지만 cout, cin형식이 훨씬 안정성과 확장성에 더 장점을 보인다.
// 또한 가독성 더욱 좋다는 장점이 있다.

/* ios::sync_with_stdio(false);Permalink
기본적으로 true 즉 동기화 상태가 디폴트 상태이다. 
즉, 평소엔 C와 C++ 입출력 방식을 제한 없이 섞어쓸 수 있는 것이다. 
C++의 버퍼(iostream)와 C의 버퍼(stdio)를 모두 사용하고 동기화가 되어 있기 때문에 딜레이가 발생하는 것인데 위 코드로 동기화를 끊을 수 있다. 
즉, C와 C++의 버퍼가 서로 독립되는 것이다. 
이렇게 사용하는 버퍼 수가 줄어듬으로써 속도가 향상된다.

주의사항
- C의 입출력 함수 쓰지 않기 (독립되어 섞어쓰면 안됨)
- 싱글 쓰레드 환경에서만 사용하기
*/

/* cin.tie(NULL); cout.tie(NULL);
기본적으로 cin과 cout은 묶여있고 묶여있는 스트림들은 한 스트림이 다른 스트림에서 각 IO 작업을 진행하기 전에 자동으로 버퍼를 비워줌을 보장합니다.
*/
